program testLib;

	#includeonce ("stdlib.hhf")
	#includeonce ("src/hidelib.hhf")
	#includeonce ("macros/macros.hhf")
	#include("hide/dbgwin.hhf")
	
	?@nodisplay := true;
	?@noalignstack := true;


	static
		strbuf	:str.strvar (1024);
		strbuf2	:str.strvar (1024);
		tknset	:cset	:= {','};
		
		real0	:real64 := 2.44;
		
		strings :string := (
			"Promulgate:" nl 
			"1 : to make (as a doctrine) known by open declaration : PROCLAIM" nl
			"2 a : to make known or public the terms of (a proposed law)" nl
			"  b : to put (a law) into action or force" nl
			"Famous quote: 'to thine own self be true'" nl
			"Verily, this is another string" nl
			"How many more strings?" nl
			"this is the last one" nl );
	
		matchstr :string := "	// now." nl "program HIDE_MAIN;";
		zz	:zstring := "who dat?";
		sss	:string := "dat who!";
	
		tokens	:string := "one,two,three,,five";


	storage

		con		:tConfig;
		buf		:tBuffer;
		buf2	:tBuffer;
		buffer	:tBuffer;
		sbuf	:tStrBuffer;
		sbuf2	:tStrBuffer;
		lst		:tBaseList;
		stk		:tStack;
		
		lst0	:tList;
		
		ttbuf	:tBuf;
		ttbuf2	:pointer to tBuf;
		
		bufptr	:pointer to tBuffer;
		real1	:real64;
		
	static
		jabba	:zstring := "jabba";
		
		// allocate string for 300 chars and initialize it
		s0	:str.strvar2( 300, "jabba the hutt" );
		
		// allocate string for 300 cahrs
		s1	:str.strvar2( 300 );
		
		// allocate string as large as the initialization string.
		s3	:str.strvar2( 0, "jabba the hutt" );
		

	type
		binrec:
			record
				one	:dword;
				two	:dword;
				three:dword;
			endrecord;
			
	static
		binr	:binrec;
		overfl	:dword := $AAAA_AAAA;

	str2: string :=(
		"SavageEd2 Documentation" nl
		"*note to SavageEd users, some of the similar features form SavageEd" nl
 		"have a different behavior in SavageEd2." nl
		"Requirements:" nl
		"This program may or may not be distributed with documents" nl
		"and source.  The only required file is" nl );
		
begin testLib;
	dbg.cls;
	hide.version();
	stdout.put ("testing hidelib.lib v", (type string eax), nl);
	
	//call testTbuf;
	//call testBuffer;
	//call testBufferClass;
	call testConfigClass;
	//call testStrBufferClass;
	//call testList;
	//call testScan;
	//call testEnv;
	//call testTstack;
	//call testHIDE;
	
	exit testLib;
	
	testHIDE::
		hide.putMem( val (type dword strings), str.length( strings) );
		stdout.put( nl nl );
		hide.putMem( val (type dword strings), str.length( strings) , 10 );
		
	ret();
	
	testBuffer::
		
		buf.create();
		buf.setDelimSkipMode( true );
		buf.setDelimiters( hide.whiteSpaceCset );
		buf.puts( "_one _two" );
		buf.bof();
		buf.getToken( strbuf );
		stdout.put(">", strbuf, nl );
		buf.getToken( strbuf );
		stdout.put(">", strbuf, nl );
		
		buf.destroy();
//		buffer.create();
//		buffer.puts( strings );
//		//buffer.writeStdout();
//		
//		buffer.bof();
//		buffer.searchf( "2" );
//		buffer.getIndex();
//		buffer.subBuf( eax, 13, buf );
//		buf.writeStdout();
//		
//		buffer.getIndex();
//		buffer.subString( eax, 13, strbuf );
//		stdout.put( nl nl, strbuf, nl nl );
//		
//		buf.destroy();
//		buffer.destroy();
//		
//		buffer.create();
//		buffer.puts( tokens );
//		buffer.bof();
//		buffer.setDelimiters( tknset );
//		buffer.setDelimSkipMode( false );
//		forever
//			breakif( buffer.isEof() );
//			buffer.getToken( strbuf );
//			stdout.put( "tkn>", strbuf, nl);
//		endfor;
//		
//		buffer.moveTo( 5 );
//		buffer.getCursorWord( strbuf );
//		stdout.put(nl, ">>", strbuf, nl );
//		
//		buffer.cursorToBOL();
//		buffer.span( hide.whiteSpaceCset );
//		mov( buffer.cursor, eax );
//		stdout.put( ">", (type char [eax]), nl );
//		
//		
//		
//		buffer.destroy();
	
	ret();

	testTbuf::
		ttbuf.create();
		ttbuf.put( nl, "now hear this", nl,  jabba, nl nl);
		//ttbuf.puts( nl "now hear this" nl nl );
		ttbuf.writeStdout();
		ttbuf.writeFileName( "neon.txt" );
		ttbuf.writeString( 0 );
		stdout.puts( eax );
		ttbuf.destroy();
		
		//tBuf.create();
		//mov( esi, ttbuf2 );
		//ttbuf2.put( nl, "hear it again", nl, jabba, nl nl );
		//ttbuf2.writeStdout();
		//ttbuf2.destroy();
		
		ret();

	error:
		stdout.put("error" nl );
	ret();
	
	//bm=testBufferClass
	testBufferClass::
		//buf.create();
		//buf2.create();
		//buf2.append (" yowdy" nl);
		//mov (100, eax);
		//buf.insert ( (type uns32 eax), eax, buf2  );
		//buf.toOut();
		//buf.destroy();
		//buf2.destroy();
		//buf.create();
		//buf.insert (matchstr);
		//buf.cursorToBOF();
		//buf.searchf ("w.");
		//if (buf.matchWord ("w") != -1) then
			//stdout.put ("not" nl);
		//endif;
//		
		buf.create();
		buf.insert ( strings[0] );
		buf.writeStdout(); stdout.newln();
		buf.bof();
		forever
			buf.span (hide.whiteSpaceCset);
			breakif (@c);
			buf.getChar();
			stdout.putc (al);
			inc (buf.cursor);
		endfor;
		buf.bof();
//		forever
//			if( buf.searchf( "action" ) != -1 ) then
//				buf.insert ("/");
//				buf.cursorRight(2);
//			else
//				break;
//			endif;
//		endfor;
		buf.toOut();
//		buf.toFile("temp.txt");
//		stdout.newln();
//		buf.erase();
//		buf.insertSet( 'b', 10 );
//		stdout.newln();
//		//buf.toOut();
//		stdout.newln();
		buf.destroy();
	ret();



	//bm=testStrBufferClass
	testStrBufferClass:
		sbuf.create();
		sbuf.putStr (strings[0]);
			hide.putz ([eax]);
			stdout.put (nl, "len = ", (type uns32 [eax-4]), nl nl);
			
		sbuf.putStr (strings[4]);
			hide.putz ([eax]);
			stdout.put (nl, "len = ", (type uns32 [eax-4]), nl nl);
			
		sbuf.putStrz (strings[8]);
		sbuf.putStrz (strings[12]);

		sbuf.getCount();
		stdout.put ("count = ", eax, nl);
		
		stdout.put (nl "testing get by index: 2" nl);
		sbuf.getStr (2);
		stdout.put ((type string eax), nl);
		
		sbuf.getStr (3);
		stdout.put ((type string eax), nl);
		
		// test iterator
		stdout.put (nl "testing iterator" nl);
		foreach sbuf.stringInBuffer() do
			stdout.put ("index ", (type uns32 ecx), " :", (type string eax), nl);			
		endfor;
		
		sbuf.toFile ("sbuf.bin");
		sbuf.destroy();
		sbuf2.create ("sbuf.bin");
		sbuf2.toFile ("sbuf2.bin");
		stdout.put ("from sbuf.bin" nl);
		foreach sbuf2.stringInBuffer() do
			stdout.put ("index ", (type uns32 ecx), " :", (type string eax), nl);
		endfor;
		sbuf2.destroy();
	ret();

	
	//bm=testConfigClass
	testConfigClass::
		stdout.put ("testing configclass" nl);
		
		con.create();
		
		con.writeString( "Section One", "String 1", "this is a string" );
		con.writeString ("Section Two", "String Key", "this is another string");
		mov( $FF, eax );
		con.writeHex	("Section One", "Hex Key", eax);
		con.renameSection ("Section Two", "Renamed Section");
		con.renameKey ("Section One", "String 1", "Renamed Key");
		con.writeUns( "Renamed Section", "Uns Key", eax );
		mov( -10, eax );
		con.writeInt( "Renamed Section", "Int Key", eax );
		con.writeBool( "Renamed Section", "Boolean Key", false );

		con.setItemTokens (tknset);
		con.writeItem ("Tokens", -1, "one,tkn1,,tkn3");
		con.writeItem ("Tokens", -1, "two,tkn1,tkn2,tkn3");
		stdout.put( nl "read token" nl);
		if (con.readItemToken ("Tokens", 0, 0, strbuf)) then
			stdout.put ("Read Token Index 0,0 :", strbuf, nl);
		endif;
		if (con.readItemToken ("Tokens", 1, 3, strbuf)) then
			stdout.put ("Read Token Index 1,3 :", strbuf, nl);
		endif;
		if (con.readItemToken ("Tokens", 0, 2, strbuf)) then
			stdout.put ("Read Token Index 0, 2 :", strbuf, nl);
		endif;

		mov( 1, binr.one );
		mov( 2, binr.two );
		mov( 3, binr.three );
		con.writeBin( "Bin Section", "Bin Key", &binr, @size( binr ) ); 
		con.readBin( "Bin Section", "Bin Key", &binr, @size( binr ) );
		stdout.put ( nl, binr.one, nl, binr.two,nl, binr.three,nl, "overfl = ", overfl, nl);

		str.put( strbuf, "Item 1" nl "Item 2" nl "Item 3" nl "Item 4" nl );
		con.writeSection( "Items", strbuf );

		// write out a text section
		str.put( strbuf, "<text>" nl, "	Body of" nl "a text section" nl nl "</text>" nl );
		con.writeSection( "Text Section", strbuf );

		con.writeReal64( "Real Section", "real1", real0 );
		con.readReal64( "Real Section", "real1", real1 );
		
		stdout.put("got real :", real1, nl );

		stdout.put( "writing 'test.ini'" nl nl );
		con.writeFileName( "test.ini" );
		con.destroy();
		
		
		// opening for test
		stdout.put( "opening 'test.ini' for reading" nl nl);
		con.create( "test.ini" );

		if( con.readSection( "Renamed Section", strbuf ) ) then
			stdout.put("Renamed Section:" nl, strbuf, nl );
		endif;


		con.getItemCount( "Items" );
		mov( eax, ecx );
		xor( edx,edx );
		while (edx < ecx ) do
			con.readItem( "Items", edx, strbuf );
			stdout.put (">", strbuf, nl);
			inc( edx );
		endwhile;
		
		con.writeItem( "Items", 2, "Item 3.0" );
		con.readSection( "Items", strbuf );
		stdout.put( nl, "Replaced item at index 2:", nl, strbuf, nl );
		
		con.insertItem( "Items", 1, "Item 2.5" );
		con.readSection( "Items", strbuf );

		stdout.put( nl, "Inserted item at index 1:", nl, strbuf, nl );

		con.getSectionList();
		mov (eax, ebx);
		while (ebx) do
			stdout.put ( "Header :", (type string (type listNode_t[ebx]).value), nl );
			mov ( (type listNode_t[ebx]).next, ebx);
		endwhile;
		
		stdout.put( nl, "deleting section 'Bin Section'" nl );
		con.deleteSection( "Bin Section" );
		
		con.getSectionList();
		mov (eax, ebx);
		while (ebx) do
			stdout.put ( "Header :", (type string (type listNode_t[ebx]).value), nl );
			mov ( (type listNode_t[ebx]).next, ebx);
		endwhile;
		
		stdout.put( nl "reading buffer section 'Items'" nl nl );
		buf.create();
 		con.readSection( "Items", buf );
	

		buf.destroy();
		
		stdout.put(nl nl "reading string" nl nl );
		con.readString( "Section One", "Renamed Key", strbuf );
		stdout.put( strbuf, nl );
		
		stdout.put("reading 'Text Section' using readSection", nl nl );
		con.readSection( "Text Section", strbuf );
		stdout.put(strbuf, nl nl );
		
		stdout.put("reading 'Text Section' using copySection", nl nl );
		con.copySection( "Text Section", strbuf );
		stdout.put(strbuf, nl nl );
		
		con.a_copyBufSection( "Text Section" );
		mov( eax, esi );
		(type tBuffer[esi]).writeStdout();
		(type tBuffer[esi]).destroy();
		
		
		con.destroy();
		
		ret();
	
	//bm=testList
	testList:
		lst0.create();
		lst0.destroy();
	ret();
	
	//bm=testScan
	testScan:
		//mov( strings, esi );
		//if ( scan.match( "Promulgate" ) ) then
		//	stdout.put ("matched, passed" nl);
		//else
		//	stdout.put ("nomatch, failed" nl);
		//endif;
		//scan.nextLine();
		//if ( scan.match( "Promulgate" ) ) then
		//	stdout.put ("matched, failed" nl);
		//else
		//	stdout.put ("nomatch, passed" nl);
		//endif;
		
		mov( str2, esi );
		if( scan.pfind( "*this", false ) ) then
			hide.putz( [esi] );
			//scan.extract( hide.strbuf );
			//stdout.put( hide.strbuf, nl );
		endif;
	ret();
	
	//bm=testEnv
	testEnv::
		env2.put("one", "1");
		env2.put("two", "2");
		env2.put("three", "3");
		
		env2.get("one", strbuf);
		if( str.ne( strbuf, "1" ) )then
			stderr.put("Error in env2 unit; env = ", strbuf, nl );
		endif;
		env2.get("two", strbuf );
		if(str.ne( strbuf, "2" ) )then
			stderr.put("Error in env2 unit; env = ", strbuf, nl );
		endif;
		env2.get("three", strbuf);
		if( str.ne( strbuf, "3")) then
			stderr.put("Error in env2 unit; env = ", strbuf, nl );
		endif;
	ret();

	testTstack::
	
		stk.create( 1000 );
		stk.dpush( 1 );
		stk.dpush( 2 );
		stk.dpush( 3 );
		stk.dpush( 4 );
		stk.pop32();
		stk.dpush( 5 );
//		forever
//			stk.pop32();
//			breakif( @nc );
//			stdout.put("popped :", eax, nl);
//		endfor;

		mov( 1, binr.one );
		mov( 2, binr.two );
		mov( 3, binr.three );
		stk.npush( &binr, @size(binr) );
		
		stk.npop( &binr, @size(binr) );
		 
		stdout.put("binr.one :", binr.one, nl,
					"binr.two :", binr.two, nl,
					"binr.three:", binr.three, nl );
		//stk.mpop( ebx, ecx, edx );
		//stdout.put( ebx, nl, ecx, nl, edx, nl );
		stk.destroy();
		
	
	ret();
	

end testLib;
