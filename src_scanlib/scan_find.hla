unit scan_find_unit;

	#includeonce ("hide/hidefunc.hhf")
	#includeonce ("strings.hhf")
	#includeonce ("excepts.hhf")

	?@nodisplay := true;
	?@noalignstack := true;

	procedure scan.find( toFind:string ); @noframe;
	
		// source = ESI
		// searches to find string "toFind"
		// returns carry = true for success
		//			ESI = pointer to start of found string in source
		//			EDI = pointer to end of found string in source
		// returns carry = false for failure
		//				ESI unchanged, EDI undefined
		
		var
			saveEAX	:dword;
			saveEBX	:dword;
			saveECX	:dword;
			startESI:dword;
		
	begin find;
		push( ebp );
		mov( esp, ebp );
		sub( _vars_, esp );
		
		mov( eax, saveEAX );
		mov( ebx, saveEBX );
		mov( ecx, saveECX );
		
		mov( toFind, edi );
		test( edi, edi );
		jz radn;
		
		cmp ((type str.strRec[edi]).length, 0);
		je returnFalse;
		
		mov( esi, startESI );
		mov( [edi], ah );
		sub( 1, esi );
		scan:
			add( 1, esi );
			mov( [esi], al );
			test( al, al );
			jz returnFalse;
			cmp( al, ah );
			jne scan;
			mov( esi, ebx );	// save start index here
			mov( (type str.strRec[edi]).length, ecx );
			repe.cmpsb();
			je returnTrue;
			mov( toFind, edi );
			mov( ebx, esi );
			jmp scan;
		
		returnTrue:
			// edi = pointer to just beyond end of found string
			mov( esi, edi );
			// esi = pointer to start of found string
			mov( ebx, esi );
			stc();	// carry = true
			jmp done;
		
		returnFalse:
			mov( startESI, esi );
			clc();
			
		done:
			mov( saveEAX, eax );
			mov( saveECX, ecx );
			mov( saveEBX, ebx );
			
			mov( ebp, esp );
			pop( ebp );
			ret( _parms_ );
			
		radn:
			raise( ex.AttemptToDerefNULL );
		
	end find;


end scan_find_unit;
