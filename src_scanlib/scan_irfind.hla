unit scan_unit;

	#includeonce ("hide/hidefunc.hhf")
	#includeonce ("strings.hhf")
	#includeonce ("excepts.hhf")

	?@nodisplay := true;
	?@noalignstack := true;

	proc
		scan.irfind		:procedure( bof:dword; toFind:string );

			// source = ESI
			// case insensitive search for string "toFind"
			// bof is start of source
			// returns carry = true for success
			//			ESI = pointer to start of found string in source
			//			EDI = pointer to end of found string in source
			// returns carry = false for failure
			//			ESI at bof, EDI undefined
			
			var
				saveEAX	:dword;
				saveEBX	:dword;
				saveECX	:dword;
				cursor	:dword;
			

		begin irfind;
			push( ebp );
			mov( esp, ebp );
			sub( _vars_, esp );
			
			mov( eax, saveEAX );
			mov( ebx, saveEBX );
			mov( ecx, saveECX );
			
			mov( toFind, edi );
			test( edi, edi );
			jz radn;
			
			mov( (type str.strRec[edi]).length, ecx );
			
			sub( ecx, esi );
			add( 1, esi );
			scan:
				sub(1, esi );
				
				cmp( esi, bof );
				jb returnFalse;
				
				cmp( (type byte [esi]), 0 );
				je	returnFalse;
				
				mov( esi, cursor );
				mov( toFind, edi );
				mov ( (type str.strRec [edi]).length, ecx);
	
				cmpLoop:
			        mov( [esi], al );
			        mov( [edi], ah );
			        add( 1, esi );
			        add( 1, edi );
			        test( al, al );
			        jz _continue;
			        cmp( al, ah );
			        je next;
			        mov( ax, bx );
			        and( $dfdf, bx );
			        cmp( bl, 'A' );
			        jb _continue;
			        cmp( bl, 'Z' );
			        ja _continue;
			        cmp( bl, bh );
			        jne _continue;
					next:
					sub (1, ecx);
					jnz cmpLoop;
					jmp returnTrue;
					
				_continue:
					mov( cursor, esi );
					jmp scan;
		
	
	
			returnTrue:
				// edi = pointer to just beyond end of found string
				mov( esi, edi );
				
				// esi = pointer to start of found string
				mov( cursor, esi );
				stc();	// carry = true
				jmp done;
			
			returnFalse:
				clc();
				
			done:
				mov( saveEAX, eax );
				mov( saveECX, ecx );
				mov( saveEBX, ebx );
				
				mov( ebp, esp );
				pop( ebp );
				ret( _parms_ );
			
			radn:
				raise( ex.AttemptToDerefNULL );
			
		end irfind;


end scan_unit;
