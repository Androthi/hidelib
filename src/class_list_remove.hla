unit class_list_remove_unit;

	#includeonce ("src/hidelib.hhf")

	?@nodisplay := true;
	?@noalignstack := true;

	const
		listedx	:text := "(type listNode_t[edx])";
		listeax	:text := "(type listNode_t[eax])";
		listebx	:text := "(type listNode_t[ebx])";
	endconst;

/*
	method tList.remove_str ( id:string );
		// remove by list id
	begin remove_str;
	USE (EAX);
		if (this.find_str (id)) then
			this.remove_ptr ([eax]);
		endif;
	ENDUSE;
	end remove_str;
*/
	method tList.remove ( var node:listNode_t );
		// remove by list node	
		var
			prev	:pointer to listNode_t;
			next	:pointer to listNode_t;
		endvar;
	
	begin remove;
	USE (EAX, EBX);
		mov (node, ebx);
		test (ebx, ebx);
		jz _end;
		move (listebx.next, next);
		move (listebx.prev, prev);
	
		mem.free (ebx);
		dec (this.cnt);
		
		mov (next, eax);
		if (eax) then
			move (prev, listeax.prev);
		else
			// just killed tail
			move (prev, this.tail);
		endif;
		
		mov (prev, eax);
		if (eax) then
			move (next, listeax.next);
		else
			// just killed the head!
			move (next, this.head);
		endif;
		
		// see if head and tail are the same
		mov (this.head, eax);
		if (eax = this.tail) then
			mov (0, this.tail);
		endif;
	_end:
	ENDUSE;
	end remove;



end class_list_remove_unit;
