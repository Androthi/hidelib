#IF ( ! @defined ( hidefunc_hhf ) )
	?hidefunc_hhf := true;
		
namespace hide;
	
	proc
		putz :procedure(var src:dword);
			@external("HIDE_PUTZ");
		
		putn :procedure(var src:dword; n:uns32);
			@external("HIDE_PUTN");
		
		putMem0 :procedure( var src:dword; len:dword );
			@external("HIDE_PUTMEM0");
		
		putMem1 :procedure( var src:dword; len:dword; cols:dword );
			@external("HIDE_PUTMEM1");
		
		putMem :overloads putMem0
			( "@text( ""hide.putMem0"")" );
		
		putMem :overloads putMem1
			( "@text( ""hide.putMem1"")" );
		// compares two zero terminated strings
		stricmp :procedure(src1:dword; src2:dword)
			{@returns ("@e")};	@external ("HIDE_STRICMP");
		
		
		// returns current version of hidelib
		version :procedure
			{@returns ("EAX")};	@external ("HIDE_VERSION");
			
		vnote :procedure
			{@returns ("EAX")}; @external ("HIDE_VERSIONINFO");
	
	type
		memory	:dword;  // pointer to memory
		
	static
		whiteSpaceCset	:cset; @external;
		alphanumCset	:cset; @external;
		nlCset			:cset; @external;
		binCset			:cset; @external;
		
		versionStr		:string; @external;
		versionNote		:string; @external;
		strbuf			:string; @external( "HIDELIB_STRBUF" ); // scratch buffer, size 300
end hide;

namespace scan;
	
	// scan procedures are low level scan functions that use
	// ESI as source, reserve EAX and EDI for other return values
	// error checking is at minimum, it is caller responsibility to
	// insure ESI and parameters contain legal values

	static
		token_cset	:cset;	@external;
		
	
	// find HLA string in buffer pointed at by ESI
	// return start in ESI, end in EDI
	// ifind is case insensitive 
	procedure find( toFind:string );
		@returns( "@c" ); @external( "SCAN_FIND" );
	procedure ifind( toFind:string );
		@returns( "@c" ); @external( "SCAN_IFIND" );

	// same as above, but search is in reverse
	// bof is the address of the start of the source
	procedure rfind( bof:dword; toFind:string );
		@returns("@c"); @external("SCAN_RFIND");
	procedure irfind( bof:dword; toFind:string );
		@returns("@c"); @external("SCAN_IRFIND");

	// specieal find procedure, looks for character, advances EDI, leaves ESI unchanged
	procedure findc( toFind:char );
		@returns( "@c" ); @external( "SCAN_FINDC" );
	
	// pattern matched find
	// 	'*' matches any number of characters
	//	'?' matches any one character
	// eg:
	// scan.pfind( "abc*45??65" );
	// matches "abc", any number of characters, "45", any 2 characters
	// and "65"
	procedure pfind( toFind:string; caseSensitive:boolean );
		@returns( "@c" ); @external( "SCAN_PFIND" );	
	
	// string/word matching, matchWord series uses hide.whiteSpaceCset delimiter set
	procedure match( toMatch:string );
		@returns("@c"); @external( "SCAN_MATCH" );
	procedure imatch( toMatch:string );
		@returns("@c"); @external( "SCAN_IMATCH" );
	procedure matchWord( toMatch:string );
		@returns("@c"); @external( "SCAN_MATCHWORD" );
	procedure imatchWord( toMatch:string );
		@returns("@c" ); @external( "SCAN_IMATCHWORD" );
	
	
	// line functions
	procedure nextLine; @returns( "@c" );
		@external( "SCAN_NEXTLINE" );
	procedure findEOLN;	@returns( "@c" );
		@external( "SCAN_FINDEOLN" );
	procedure a_getLine; @returns( "@c" );
		@external( "SCAN_A_GETLINE" );
	procedure getLine( dest:string );
		@returns( "@c" ); @external( "SCAN_GETLINE" );
	
	// skip over white space and alphanumCseteric chars
	// these use the hide.whiteSpaceCset and hide.alphanumCset respectively
	procedure skipws; @returns( "@c" );
		@external( "SCAN_SKIPWS" );
	procedure skipan; @returns( "@c" );
		@external( "SCAN_SKIPalphanumCset" );
	
	// tokenize
	// uses default delimiter set, same as HLA standard library.
	// can be changed, see utility functions
	procedure getToken( dest:string );
		@returns( "@c" ); @external( "SCAN_GETTOKEN" );
	procedure a_getToken; @returns( "@c" );
		@external( "SCAN_A_GETTOKEN" );
	
	// utilty function used by tokenizer functions, returns start and end of
	// a token in ESI/EDI
	procedure getTokenLexeme;
		@returns( "@c" ); @external( "SCAN_GETTOKENLEXEME" );

	// utility functions
	// change token delimiters, set tokenizer behavior
	// filed mode = true returns empty tokens
	procedure setDelimiters( delims:cset );
		@external( "SCAN_setDelimiters" );
	procedure setFieldMode( mode:boolean );
		@external( "SCAN_SETFIELDMODE" );
	
	
	// extract a string starting from ESI and ending at EDI
	// returns string pointer in EAX or string in dest
	procedure a_extract; @returns("EAX");
		@external ("SCAN_A_EXTRACT");
	procedure extract( dest:string );
		@external ("SCAN_EXTRACT");

end scan;


namespace os2;
	procedure sysexec (cmdLn:string);
		@returns ("EAX"); @external ("OS2_SYSEXEC");
	procedure getmodulepath (dest:string);
		@external ("OS2_GETMODULEPATH");

end os2;

namespace env2;

	procedure getstrings;
		@returns ("EAX"); @external ("ENV2_GETENVSTRINGS");
	procedure get (envVar:string; dest:string);
		@returns ("EAX"); @external ("ENV2_GET");
	procedure a_get (envVar:string);
		@returns ("EAX"); @external ("ENV2_AGET");
	procedure put (envStr:string; envValue:string);
		@external ("ENV2_PUT");

end env2;

namespace mem2;

	procedure size ( pMemory:dword);
		@returns ("EAX"); @external ("MEM2_SIZE");
	procedure fillMem( var lpSource:dword; MemSize:dword; Value:byte );
		@external ("MEM2_FILLMEM");

end mem2;

#ENDIF
